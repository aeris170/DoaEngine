<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="245px" preserveAspectRatio="none" style="width:275px;height:245px;background:#000000;" version="1.1" viewBox="0 0 275 245" width="275px" zoomAndPan="magnify"><defs/><g><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="140" x="5" y="19">Dot Executable: null</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="173" x="5" y="36.6094">No dot executable found</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="258" x="5" y="54.2188">Cannot find Graphviz. You should try</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="9" y="71.8281"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="71" x="5" y="89.4375">@startuml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="5" y="107.0469">testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="66" x="5" y="124.6563">@enduml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="9" y="142.2656"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="15" x="9" y="159.875">or</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="9" y="177.4844"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="201" x="5" y="195.0938">java -jar plantuml.jar -testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="9" y="212.7031"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacingAndGlyphs" textLength="190" x="39" y="231.6934">UMLDoclet 2.0.12, PlantUML 1.2020.16</text><!--MD5=[1ced5384413114f5a4ee1e3784f3a874]
@startuml
    namespace doa.engine.core {

        class DoaCamera [[DoaCamera.html]] {
            {static} +adjustCamera(DoaObject, int, int, int, int): void
            {static} +enableMouseZoom(DoaObject, float, float): void
            {static} +resetMouseZoom(): void
            {static} +disableMouseZoom(): void
            {static} +setX(float): void
            {static} +setY(float): void
            {static} +setZ(float): void
            {static} +setMinX(float): void
            {static} +setMinY(float): void
            {static} +setMinZ(float): void
            {static} +setMaxX(float): void
            {static} +setMaxY(float): void
            {static} +setMaxZ(float): void
            {static} +setTweenAmountX(float): void
            {static} +setTweenAmountY(float): void
            {static} +setTweenAmountZ(float): void
            {static} +getObjectToFollow(): DoaObject
            {static} +getObjectToZoomInto(): DoaObject
            {static} +getX(): float
            {static} +getY(): float
            {static} +getZ(): float
            {static} +getMinX(): float
            {static} +getMinY(): float
            {static} +getMinZ(): float
            {static} +getMaxX(): float
            {static} +getMaxY(): float
            {static} +getMaxZ(): float
            {static} +getTweenAmountX(): float
            {static} +getTweenAmountY(): float
            {static} +getTweenAmountZ(): float
            {static} +isObjectToFollowInitialized(): boolean
            {static} +isMouseZoomingEnabled(): boolean
        }

        class DoaEngine [[DoaEngine.html]] {
            {static} +VERSION: String
        }

        class DoaEngineSettings [[DoaEngineSettings.html]] {
            +TICK_RATE: int
            +CLEAR_COLOR: Color
            +AXIS_HELPERS: boolean
            +CUSTOM_HINTS: Map<Key, Object>
            +REFERENCE_RESOLUTION: DoaVector
        }

        abstract class DoaGame [[DoaGame.html]] {
            {static} +launch(String...): void
            +isLaunched(): boolean
            {abstract} +initialize(DoaEngineSettings, DoaWindowSettings, String...): void
        }

        class DoaGraphicsFunctions [[DoaGraphicsFunctions.html]] {
            {static} +clearRect(float, float, float, float): void
            {static} +clipRect(float, float, float, float): void
            {static} +drawAnimation(DoaAnimation, float, float, float, float): void
            {static} +drawAnimation(DoaAnimation, float, float): void
            {static} +drawArc(float, float, float, float, float, float): void
            {static} +drawImage(Image, float, float): boolean
            {static} +drawImage(Image, float, float, float, float): boolean
            {static} +drawImage(Image, float, float, float, float, float, float, float, float): boolean
            {static} +drawLine(float, float, float, float): void
            {static} +drawOval(float, float, float, float): void
            {static} +drawPolygon(float[], float[], int): void
            {static} +drawPolyline(float[], float[], int): void
            {static} +drawRoundRect(float, float, float, float, float, float): void
            {static} +fillArc(float, float, float, float, float, float): void
            {static} +fillOval(float, float, float, float): void
            {static} +fillPolygon(float[], float[], int): void
            {static} +fillRect(float, float, float, float): void
            {static} +fillRoundRect(float, float, float, float, float, float): void
            {static} +getClip(): Shape
            {static} +getClipBounds(): Rectangle
            {static} +getColor(): Color
            {static} +getFont(): Font
            {static} +getFontMetrics(Font): FontMetrics
            {static} +setClip(Shape): void
            {static} +setClip(float, float, float, float): void
            {static} +setColor(Color): void
            {static} +setFont(Font): void
            {static} +setPaintMode(): void
            {static} +setXORMode(Color): void
            {static} +addRenderingHints(Map<?, ?>): void
            {static} +clip(Shape): void
            {static} +draw(Shape): void
            {static} +drawString(String, float, float): void
            {static} +drawRect(float, float, float, float): void
            {static} +fill(Shape): void
            {static} +getBackground(): Color
            {static} +getComposite(): Composite
            {static} +getDeviceConfiguration(): GraphicsConfiguration
            {static} +getFontRenderContext(): FontRenderContext
            {static} +getPaint(): Paint
            {static} +getRenderingHint(Key): Object
            {static} +getRenderingHints(): RenderingHints
            {static} +getStroke(): Stroke
            {static} +getTransform(): AffineTransform
            {static} +rotate(float): void
            {static} +rotate(float, float, float): void
            {static} +scale(float, float): void
            {static} +setBackground(Color): void
            {static} +setComposite(Composite): void
            {static} +setPaint(Paint): void
            {static} +setRenderingHint(Key, Object): void
            {static} +setRenderingHints(Map<?, ?>): void
            {static} +setStroke(Stroke): void
            {static} +setTransform(AffineTransform): void
            {static} +shear(float, float): void
            {static} +transform(AffineTransform): void
            {static} +translate(float, float): void
            {static} +hitClip(float, float, float, float): boolean
            {static} +getFontMetrics(): FontMetrics
            {static} +getClipBounds(Rectangle): Rectangle
            {static} +fillPolygon(Polygon): void
            {static} +fill3DRect(float, float, float, float, boolean): void
            {static} +drawPolygon(Polygon): void
            {static} +drawChars(char[], int, int, float, float): void
            {static} +drawBytes(byte[], int, int, float, float): void
            {static} +draw3DRect(float, float, float, float, boolean): void
            {static} +turnOnLightContribution(): void
            {static} +turnOffLightContribution(): void
            {static} +areLightsContributing(): boolean
            {static} +zoomToLookAt(): void
            {static} +resetAll(): void
            {static} +pushAll(): void
            {static} +popAll(): void
            {static} +resetTransform(): void
            {static} +pushTransform(): void
            {static} +popTransform(): void
            {static} +resetComposite(): void
            {static} +pushComposite(): void
            {static} +popComposite(): void
            {static} +resetClip(): void
            {static} +pushClip(): void
            {static} +popClip(): void
            {static} +resetStroke(): void
            {static} +pushStroke(): void
            {static} +popStroke(): void
            {static} +resetColor(): void
            {static} +pushColor(): void
            {static} +popColor(): void
        }

        enum DoaRenderingMode [[DoaRenderingMode.html]] {
            {static} +QUALITY
            {static} +BALANCED
            {static} +SPEED
            {static} +CUSTOM
        }

        class DoaWindow [[DoaWindow.html]] {
        }

        class DoaWindowSettings [[DoaWindowSettings.html]] {
            +TITLE: String
            +SCREEN: GraphicsDevice
            +DM: DisplayMode
            +RESOLUTION_OD: DoaVector
            +REFRESH_RATE_OD: Integer
            +BPP_OD: Integer
            +DEFAULT_CURSOR: Cursor
            +CROSSHAIR_CURSOR: Cursor
            +TEXT_CURSOR: Cursor
            +WAIT_CURSOR: Cursor
            +SW_RESIZE_CURSOR: Cursor
            +SE_RESIZE_CURSOR: Cursor
            +NW_RESIZE_CURSOR: Cursor
            +NE_RESIZE_CURSOR: Cursor
            +N_RESIZE_CURSOR: Cursor
            +S_RESIZE_CURSOR: Cursor
            +W_RESIZE_CURSOR: Cursor
            +E_RESIZE_CURSOR: Cursor
            +HAND_CURSOR: Cursor
            +MOVE_CURSOR: Cursor
            +ICON: Image
        }

        java.io.Serializable <|.. DoaCamera
        DoaEngineSettings - -> DoaRenderingMode: RENDERING_MODE
    }

    namespace java.io {
        interface Serializable
    }

    center footer UMLDoclet 2.0.12, PlantUML 1.2020.16
@enduml

PlantUML version 1.2020.16(Sun Aug 23 23:20:43 TRT 2020)
(APACHE source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: Cp1254
Language: en
Country: US
--></g></svg>