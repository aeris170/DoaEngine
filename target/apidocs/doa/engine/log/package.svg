<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="245px" preserveAspectRatio="none" style="width:275px;height:245px;background:#000000;" version="1.1" viewBox="0 0 275 245" width="275px" zoomAndPan="magnify"><defs/><g><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="140" x="5" y="19">Dot Executable: null</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="173" x="5" y="36.6094">No dot executable found</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="258" x="5" y="54.2188">Cannot find Graphviz. You should try</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="9" y="71.8281"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="71" x="5" y="89.4375">@startuml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="50" x="5" y="107.0469">testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="66" x="5" y="124.6563">@enduml</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="9" y="142.2656"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="15" x="9" y="159.875">or</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="9" y="177.4844"/><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="201" x="5" y="195.0938">java -jar plantuml.jar -testdot</text><text fill="#33FF02" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="0" x="9" y="212.7031"/><text fill="#888888" font-family="sans-serif" font-size="10" lengthAdjust="spacingAndGlyphs" textLength="190" x="39" y="231.6934">UMLDoclet 2.0.12, PlantUML 1.2020.16</text><!--MD5=[bd3f7cf5fd441cb4316f8829c46ec1ef]
@startuml
    namespace doa.engine.log {

        class DoaLogger [[DoaLogger.html]] {
            {static} +getInstance(): DoaLogger
            +setTarget(String): void
            +log(LogLevel, boolean): void
            +log(LogLevel, char): void
            +log(LogLevel, char[]): void
            +log(LogLevel, double): void
            +log(LogLevel, float): void
            +log(LogLevel, int): void
            +log(LogLevel, long): void
            +log(LogLevel, Object): void
            +log(LogLevel, String): void
            +finest(boolean): void
            +finest(char): void
            +finest(char[]): void
            +finest(double): void
            +finest(float): void
            +finest(int): void
            +finest(long): void
            +finest(Object): void
            +finest(String): void
            +finer(boolean): void
            +finer(char): void
            +finer(char[]): void
            +finer(double): void
            +finer(float): void
            +finer(int): void
            +finer(long): void
            +finer(Object): void
            +finer(String): void
            +fine(boolean): void
            +fine(char): void
            +fine(char[]): void
            +fine(double): void
            +fine(float): void
            +fine(int): void
            +fine(long): void
            +fine(Object): void
            +fine(String): void
            +config(boolean): void
            +config(char): void
            +config(char[]): void
            +config(double): void
            +config(float): void
            +config(int): void
            +config(long): void
            +config(Object): void
            +config(String): void
            +info(boolean): void
            +info(char): void
            +info(char[]): void
            +info(double): void
            +info(float): void
            +info(int): void
            +info(long): void
            +info(Object): void
            +info(String): void
            +warning(boolean): void
            +warning(char): void
            +warning(char[]): void
            +warning(double): void
            +warning(float): void
            +warning(int): void
            +warning(long): void
            +warning(Object): void
            +warning(String): void
            +severe(boolean): void
            +severe(char): void
            +severe(char[]): void
            +severe(double): void
            +severe(float): void
            +severe(int): void
            +severe(long): void
            +severe(Object): void
            +severe(String): void
            +newLine(): void
        }

        interface Logger [[Logger.html]] {
            {abstract} +setLevel(LogLevel): void
            {abstract} +setTarget(String): void
            {abstract} +log(LogLevel, boolean): void
            {abstract} +log(LogLevel, char): void
            {abstract} +log(LogLevel, char[]): void
            {abstract} +log(LogLevel, double): void
            {abstract} +log(LogLevel, float): void
            {abstract} +log(LogLevel, int): void
            {abstract} +log(LogLevel, long): void
            {abstract} +log(LogLevel, Object): void
            {abstract} +log(LogLevel, String): void
            {abstract} +finest(boolean): void
            {abstract} +finest(char): void
            {abstract} +finest(char[]): void
            {abstract} +finest(double): void
            {abstract} +finest(float): void
            {abstract} +finest(int): void
            {abstract} +finest(long): void
            {abstract} +finest(Object): void
            {abstract} +finest(String): void
            {abstract} +finer(boolean): void
            {abstract} +finer(char): void
            {abstract} +finer(char[]): void
            {abstract} +finer(double): void
            {abstract} +finer(float): void
            {abstract} +finer(int): void
            {abstract} +finer(long): void
            {abstract} +finer(Object): void
            {abstract} +finer(String): void
            {abstract} +fine(boolean): void
            {abstract} +fine(char): void
            {abstract} +fine(char[]): void
            {abstract} +fine(double): void
            {abstract} +fine(float): void
            {abstract} +fine(int): void
            {abstract} +fine(long): void
            {abstract} +fine(Object): void
            {abstract} +fine(String): void
            {abstract} +config(boolean): void
            {abstract} +config(char): void
            {abstract} +config(char[]): void
            {abstract} +config(double): void
            {abstract} +config(float): void
            {abstract} +config(int): void
            {abstract} +config(long): void
            {abstract} +config(Object): void
            {abstract} +config(String): void
            {abstract} +info(boolean): void
            {abstract} +info(char): void
            {abstract} +info(char[]): void
            {abstract} +info(double): void
            {abstract} +info(float): void
            {abstract} +info(int): void
            {abstract} +info(long): void
            {abstract} +info(Object): void
            {abstract} +info(String): void
            {abstract} +warning(boolean): void
            {abstract} +warning(char): void
            {abstract} +warning(char[]): void
            {abstract} +warning(double): void
            {abstract} +warning(float): void
            {abstract} +warning(int): void
            {abstract} +warning(long): void
            {abstract} +warning(Object): void
            {abstract} +warning(String): void
            {abstract} +severe(boolean): void
            {abstract} +severe(char): void
            {abstract} +severe(char[]): void
            {abstract} +severe(double): void
            {abstract} +severe(float): void
            {abstract} +severe(int): void
            {abstract} +severe(long): void
            {abstract} +severe(Object): void
            {abstract} +severe(String): void
            {abstract} +newLine(): void
        }

        enum LogLevel [[LogLevel.html]] {
            {static} +OFF
            {static} +SEVERE
            {static} +WARNING
            {static} +INFO
            {static} +CONFIG
            {static} +FINE
            {static} +FINER
            {static} +FINEST
            +getColorSequence(): String
            +getExtraSpaceCharacters(): String
        }

        Logger <|.. DoaLogger
        DoaLogger - -> DoaLogger: LOGGER
        DoaLogger - -> LogLevel: level
    }

    center footer UMLDoclet 2.0.12, PlantUML 1.2020.16
@enduml

PlantUML version 1.2020.16(Sun Aug 23 23:20:43 TRT 2020)
(APACHE source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: Cp1254
Language: en
Country: US
--></g></svg>